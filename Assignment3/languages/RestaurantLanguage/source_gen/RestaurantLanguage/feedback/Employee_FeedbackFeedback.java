package RestaurantLanguage.feedback;

/*Generated by MPS */

import jetbrains.mps.core.aspects.feedback.api.BaseFeedbackDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.feedback.api.FeedbackProvider;
import jetbrains.mps.core.aspects.feedback.messages.IncorrectTargetChildRoleContext;
import jetbrains.mps.core.aspects.feedback.messages.BaseMessageProvider;
import jetbrains.mps.core.aspects.feedback.messages.ProblemKindId;
import jetbrains.mps.core.aspects.feedback.messages.PredefinedStructureProblemKind;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.core.aspects.feedback.messages.MessageProvider;
import java.util.List;
import java.util.Collections;
import java.util.Arrays;
import java.util.stream.Stream;

public final class Employee_FeedbackFeedback extends BaseFeedbackDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xb104fc7d0eb94ddcL, 0x828f1118413b5a6bL, 0x20a07844fbef2c5bL, "RestaurantLanguage.structure.Employee");

  private static final FeedbackProvider<IncorrectTargetChildRoleContext> MSGPROVIDER_WhenChildRoleHasIncompatibleTargetConcept_vv18el_a = new BaseMessageProvider<IncorrectTargetChildRoleContext>(new ProblemKindId(PredefinedStructureProblemKind.TARGET_CONCEPT_INCORRECT_CHILD)) {
    @NotNull
    @Override
    public MessageProvider.Msg yieldMessage(IncorrectTargetChildRoleContext context) {
      return format("%s is not correct", context.getParentNode());
    }
  };

  private static final List<FeedbackProvider> PROVIDERS = Collections.unmodifiableList(Arrays.<FeedbackProvider>asList(MSGPROVIDER_WhenChildRoleHasIncompatibleTargetConcept_vv18el_a));

  public Employee_FeedbackFeedback() {
    super(CONCEPT);
  }

  @NotNull
  @Override
  public Stream<FeedbackProvider> getDeclaredProviders() {
    return PROVIDERS.stream();
  }
}
