package RestaurantLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Bathroom;
  private ConceptPresentation props_City;
  private ConceptPresentation props_Course;
  private ConceptPresentation props_Diagram;
  private ConceptPresentation props_DiningRoom;
  private ConceptPresentation props_Employee;
  private ConceptPresentation props_Kitchen;
  private ConceptPresentation props_Menu;
  private ConceptPresentation props_Owner;
  private ConceptPresentation props_Person;
  private ConceptPresentation props_Region;
  private ConceptPresentation props_Restaurant;
  private ConceptPresentation props_RestaurantArea;
  private ConceptPresentation props_Table;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Bathroom:
        if (props_Bathroom == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Bathroom = cpb.create();
        }
        return props_Bathroom;
      case LanguageConceptSwitch.City:
        if (props_City == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_City = cpb.create();
        }
        return props_City;
      case LanguageConceptSwitch.Course:
        if (props_Course == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Course = cpb.create();
        }
        return props_Course;
      case LanguageConceptSwitch.Diagram:
        if (props_Diagram == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Diagram = cpb.create();
        }
        return props_Diagram;
      case LanguageConceptSwitch.DiningRoom:
        if (props_DiningRoom == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DiningRoom = cpb.create();
        }
        return props_DiningRoom;
      case LanguageConceptSwitch.Employee:
        if (props_Employee == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Employee = cpb.create();
        }
        return props_Employee;
      case LanguageConceptSwitch.Kitchen:
        if (props_Kitchen == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Kitchen = cpb.create();
        }
        return props_Kitchen;
      case LanguageConceptSwitch.Menu:
        if (props_Menu == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Menu = cpb.create();
        }
        return props_Menu;
      case LanguageConceptSwitch.Owner:
        if (props_Owner == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Owner = cpb.create();
        }
        return props_Owner;
      case LanguageConceptSwitch.Person:
        if (props_Person == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Person = cpb.create();
        }
        return props_Person;
      case LanguageConceptSwitch.Region:
        if (props_Region == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Region = cpb.create();
        }
        return props_Region;
      case LanguageConceptSwitch.Restaurant:
        if (props_Restaurant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Restaurant = cpb.create();
        }
        return props_Restaurant;
      case LanguageConceptSwitch.RestaurantArea:
        if (props_RestaurantArea == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_RestaurantArea = cpb.create();
        }
        return props_RestaurantArea;
      case LanguageConceptSwitch.Table:
        if (props_Table == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Table");
          props_Table = cpb.create();
        }
        return props_Table;
    }
    return null;
  }
}
