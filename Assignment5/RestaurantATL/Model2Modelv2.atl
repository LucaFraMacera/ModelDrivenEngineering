-- @path RestaurantMetamodel=/Restaurant/model/RestaurantMetamodel.ecore
-- @path RestaurantMetamodelv2=/Restaurant/model/RestaurantMetamodel2.ecore

module RestaurantMetamodel2RestaurantMetamodelv2;
create OUT : RestaurantMetamodelv2 from IN : RestaurantMetamodel;

helper context RestaurantMetamodel!Person def : createEmail() : String = 
	(self.name+'.'+self.surname+'@gmail.com').toLower();

abstract rule NamedElement2NamedElementv2 {
	from s : RestaurantMetamodel!NamedElement
	to t : RestaurantMetamodelv2!NamedElement(
		name <- s.name
	)
}

abstract rule DiagramElement2DiagramElementv2 extends NamedElement2NamedElementv2 {
	from s : RestaurantMetamodel!DiagramElement
	to t : RestaurantMetamodelv2!DiagramElement
}


abstract rule Person2Personv2 extends DiagramElement2DiagramElementv2 {
	from s : RestaurantMetamodel!Person
	to t : RestaurantMetamodelv2!Person(
		birthDate <- s.birthDate,
		birthPlace <- s.birthPlace,
		fiscalCode <- s.fiscalCode,
		gender <- s.gender,
		surname <- s.surname,
		email <- s.createEmail(),
		telephoneNumber <- OclUndefined
	)
}

abstract rule Employee2Employeev2 extends Person2Personv2 {
	from s : RestaurantMetamodel!Employee
	to t : RestaurantMetamodelv2!Employee(
		contractExpirationDate <- s.contractExpirationDate,
		contractSignDate <- s.contractSignDate,
		salary <- s.salary
	)
}

abstract rule RestaurantArea2Area extends NamedElement2NamedElementv2 {
  from s : RestaurantMetamodel!RestaurantArea
  to t : RestaurantMetamodelv2!Area (
    area <- s.area,
    perimeter <- s.perimeter
  )
}

rule Restaurant2Restaurantv2 extends DiagramElement2DiagramElementv2{
	from s : RestaurantMetamodel!Restaurant
	to t : RestaurantMetamodelv2!Restaurant (
		city <- s.city,
		employees <- s.employees,
		menus <- s.menus,
		numberOfEmployes <- s.numberOfEmployes,
		owners <- s.owners,
		rooms <- s.rooms,
		street <- s.street,
		telephone <- s.telephone,
		totalArea <- s.totalArea
	)
}

rule City2Cityv2 extends DiagramElement2DiagramElementv2 {
	from s : RestaurantMetamodel!City
	to t : RestaurantMetamodelv2!City (
		cap <- s.cap
	)
}

rule Diagram2Diagramv2 {
	from s : RestaurantMetamodel!Diagram
	to t : RestaurantMetamodelv2!Diagram (
		elements <- s.elements,
		name <- s.name
	)
}

rule Owner2Ownerv2 extends Person2Personv2 {
	from s : RestaurantMetamodel!Owner
	to t : RestaurantMetamodelv2!Owner (
		vat <- s.vat
	)
}

rule Employee2RestaurantEmployee extends Employee2Employeev2 {
	from s : RestaurantMetamodel!Employee
	to t : RestaurantMetamodelv2!RestaurantEmployee(
		role <- s.role
	)
}

rule Menu2Menuv2 extends NamedElement2NamedElementv2 {
	from s : RestaurantMetamodel!Menu
	to t : RestaurantMetamodelv2!Menu (
		courses <- s.courses,
		numberOfCourses <- s.numberOfCourses
	)
}

rule Course2Coursev2 extends NamedElement2NamedElementv2 {
	from s : RestaurantMetamodel!Course
	to t : RestaurantMetamodelv2!Course (
		numberOfPieces <- s.numberOfPieces,
		price <- s.price,
		type <- s.type
	)
}


rule DiningRoom2DiningRoomv2 extends RestaurantArea2Area{
	from s : RestaurantMetamodel!DiningRoom
	to t : RestaurantMetamodelv2!DiningRoom (
		numberOfTables <- s.numberOfTables,
		tables <- s.tables
	)
}

rule Table2Tablev2{
	from s : RestaurantMetamodel!Table
	to t : RestaurantMetamodelv2!Table (
		diningRoom <- s.diningRoom,
		material <- s.material,
		number <- s.number,
		numberOfSeats <- s.numberOfSeats
	)
}

rule Kitchen2Kitchenv2 extends RestaurantArea2Area {
	from s : RestaurantMetamodel!Kitchen
	to t : RestaurantMetamodelv2!Kitchen (
		numberOfStoves <- s.numberOfStoves
	)
}

rule Bathroom2Bathroomv2 extends RestaurantArea2Area {
	from s : RestaurantMetamodel!Bathroom
	to t : RestaurantMetamodelv2!Bathroom (
		gender <- s.gender,
		isAccessible <- s.isAccessible,
		numberOfToilets <- s.numberOfToilets
	)
}
